import Head from "next/head";
import Image from "next/image";
import localFont from "next/font/local";
import styles from "src/styles/Home.module.css";
import { Footer } from "src/components/Footer";
import {Headline} from "src/components/Headline";
import{Main}from "src/components/Main";
import { Header } from "src/components/Header";
import { useCallback, useEffect, useState } from "react";

// const handleClick=(e)=>{
//   console.log(e.target.href)
//   e.preventDefault();}

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});
//let foo=1;
 export default function Home() {
  const [count,setCount]=useState(1)
  const [text,setText]=useState("")
  const [isShow,setIsshow]=useState(true)
  const [array,setArray]=useState([])
  const handleClick=useCallback((e)=>{
    if (count<10){
    setCount(count=>count+1)
    }
    },[count])


    const handleDisplay=useCallback(()=>{
    setIsshow((previsShow)=>!previsShow)
    },[])
 
  // useEffect(()=>{
  //   document.body.style.backgroundColor="lightblue"
  //   return()=>{
  //     document.body.style.backgroundColor=""
    
  //   }

  // },[])

   useEffect(()=>{
    document.body.style.backgroundColor="lightblue"
    return()=>{
      document.body.style.backgroundColor=""
    
    }

  },[])

  const handleChange =useCallback((e)=>{
    if (e.target.value.length>5){
      alert("5文字以内にしてください")
      return
    }
    setText(e.target.value.trim())
  },[])

  const handleAdd=useCallback(()=>{
    setArray((prevArray)=>{
      if (prevArray.some((item)=>item===text)){
        alert("同じ要素がすでに存在します")
        return prevArray
      }
      return [...prevArray,text]
    })
  },[text])

  return (
    <>
      <Head>
        <title>IndexPage</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      
      <button
      href="/about" 
      onClick={handleClick}>ボタン</button>
      <button onClick={handleDisplay}    >{isShow ?"非表示":"表示"}</button>
      <input type="text"  value={text} onChange={handleChange}/>
      <button onClick={handleAdd} >追加</button>
      <ul>{array.map(item=>{
        return(
          <li key={item}>{item}</li>
        )
      })}</ul>
      <Header/>
      {isShow? <h1>{count}</h1>:null}
      <div
        className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}
      >
        <Main page="index"/>
        <Footer/>
      </div>
    </>
  );
}
