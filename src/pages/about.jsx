import Head from "next/head";
import Image from "next/image";
import localFont from "next/font/local";
import styles from "src/styles/Home.module.css";
import { Footer } from "src/components/Footer";
import {Headline} from "src/components/Headline";
import{Main}from "src/components/Main";
import { Header } from "src/components/Header";
import { useCounter } from "src/hooks/useCounter";

import { useInputArray } from "src/hooks/useInputArray";
import { useBgLightblue } from "src/hooks/useBgLightblue";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});




export default function About() {
const{count ,isShow,handleClick,handleDisplay}=useCounter()
 const{text,array,handleChange,handleAdd}=useInputArray()
 useBgLightblue()
  return (
    <>
      <Head>
        <title>AboutPage</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <button
      href="/about" 
      onClick={handleClick}>ボタン</button>
      <button onClick={handleDisplay}    >{isShow ?"非表示":"表示"}</button>


      <input type="text"  value={text} onChange={handleChange}/>
      <button onClick={handleAdd} >追加</button>
      <ul>{array.map(item=>{
        return(
          <li key={item}>{item}</li>
        )
      })}</ul>
      <Header/>
      {isShow? <h1>{count}</h1>:null}
      <div
        className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}
      >  
        <Main page="about"/>
        <Footer/>
      </div>
    </>
  );
}




// import Head from "next/head";
// import Image from "next/image";
// import localFont from "next/font/local";
// import styles from "src/styles/Home.module.css";
// import { Footer } from "src/components/Footer";
// import { Headline } from "src/components/Headline";
// import { Main } from "src/components/Main";
// import { Header } from "src/components/Header";
// import { useState, useCallback, useEffect } from "react";

// const useCounter = () => {
//   const [count, setCount] = useState(1);
//   const [isShow, setIsShow] = useState(false);

//   const handleClick = useCallback(() => {
//     if (count < 10) {
//       setCount((prevCount) => prevCount + 1);
//     }
//   }, [count]);

//   const handleDisplay = useCallback(() => {
//     setIsShow((prevIsShow) => !prevIsShow);
//   }, []);

//   return { count, isShow, handleClick, handleDisplay };
// };

// const geistSans = localFont({
//   src: "./fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// export default function Home() {
//   const { count, isShow, handleClick, handleDisplay } = useCounter();
//   const [text, setText] = useState("");
//   const [array, setArray] = useState([]);

//   useEffect(() => {
//     document.body.style.backgroundColor = "lightblue";
//     return () => {
//       document.body.style.backgroundColor = "";
//     };
//   }, []);

//   const handleChange = useCallback((e) => {
//     const value = e.target.value.trim();
//     if (value.length > 5) {
//       alert("5文字以内にしてください");
//       return;
//     }
//     setText(value);
//   }, []);

//   const handleAdd = useCallback(() => {
//     if (!text) {
//       alert("テキストを入力してください");
//       return;
//     }
//     setArray((prevArray) => {
//       if (prevArray.some((item) => item === text)) {
//         alert("同じ要素がすでに存在します");
//         return prevArray;
//       }
//       return [...prevArray, text];
//     });
//   }, [text]);

//   return (
//     <>
//       <Head>
//         <title>AboutPage</title>
//         <meta name="description" content="Generated by create next app" />
//         <meta name="viewport" content="width=device-width, initial-scale=1" />
//       </Head>
//       <button onClick={handleClick}>カウント増加</button>
//       <button onClick={handleDisplay}>{isShow ? "非表示" : "表示"}</button>
//       <input type="text" value={text} onChange={handleChange} />
//       <button onClick={handleAdd}>追加</button>
//       <ul>
//         {array.map((item) => (
//           <li key={item}>{item}</li>
//         ))}
//       </ul>
//       <Header />
//       {isShow && <h1>{count}</h1>}
//       <div
//         className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}
//       >
//         <Main page="about" />
//         <Footer />
//       </div>
//     </>
//   );
// }
